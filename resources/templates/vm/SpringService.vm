package ${packageName};

#foreach($item in $imports)
import ${item};
#end

/**
* @author: ${author}
* @time: ${createTime}
* @description: ${comment}
*/
${annotation}
public class ${clzName} {
    #if(!${lombokLog})
    private final static Logger log = LoggerFactory.getLogger(${clzName}.class);
    #end

    @Autowired
    private ${mapperName} ${mapperFieldName};

#foreach($method in $methods)

    /**
     #foreach($parameter in $method.parameters)* @param #if($method.tpye=="INSERT"||$method.tpye=="INSERT_BATCH"||$method.tpye=="UPDATE"||$method.tpye=="DELETE")entity #else ${parameter.javaName} #end ${parameter.comment}#end

     * @return ${method.returnType}
     */
    public ${method.returnType} ${method.name}(#foreach($parameter in $method.parameters)${parameter.javaType} ${parameter.paramName}#if($foreach.hasNext), #end#end){
        log.info("${method.name}=#foreach($parameter in $method.parameters)${parameter.paramName}#if($foreach.hasNext){}, #end#end",#foreach($parameter in $method.parameters)${parameter.paramName}#if($foreach.hasNext), #end#end);
        ${method.returnType} result= ${mapperFieldName}.${method.name}(#foreach($parameter in $method.parameters)${parameter.paramName}#if($foreach.hasNext), #end#end);
        log.info("${method.name}=#foreach($parameter in $method.parameters)${parameter.paramName}#if($foreach.hasNext){}, #end#end,result:{}",#foreach($parameter in $method.parameters)${parameter.paramName}#if($foreach.hasNext), #end#end, result);
        return result;
    }
#end

}